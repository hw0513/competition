<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
* 代码为自动生成 Created by www.magicalcoder.com
* 如果你改变了此类 read 请将此行删除
*  欢迎加入官方QQ群:323237052
-->
<mapper namespace="com.hw.competition.service.student.mapper.StudentMapper">
    <!-- Student -->
    <resultMap id="resultMap" type="Student">
                <id column="student_id" property="studentId"/>
                <result column="id_number" property="idNumber" />
                <result column="class_name" property="className" />
                <result column="school_number" property="schoolNumber" />
    </resultMap>
    <!-- 查询单个实体 -->
    <select id="getModel" parameterType="hashmap" resultMap="resultMap">
        select  <choose><when test="NotIgnore_!=null and NotIgnore_"><include refid="selectSqlNotIgnoreModel"/> </when><otherwise><include refid="selectSqlIgnoreModel"/></otherwise></choose>
        from  <include refid="tableSql"/>  where 1=1 <include refid="whereSqlModel"/> <include refid="orderGroupLimit"/>
    </select>
    <!--根据主键 查询单个实体 -->
    <select id="getModelByPk" parameterType="hashmap" resultMap="resultMap">
        select  <choose><when test="NotIgnore_!=null and NotIgnore_"><include refid="selectSqlNotIgnoreModel"/> </when><otherwise><include refid="selectSqlIgnoreModel"/></otherwise></choose>
        from  <include refid="tableSql"/>  <include refid="magicalcoderPkWhereSql"/>
    </select>
    <!-- 查询一组实体 -->
    <select id="getModelList" parameterType="hashmap" resultMap="resultMap">
        select  <choose><when test="NotIgnore_!=null and NotIgnore_"><include refid="selectSqlNotIgnoreModel"/> </when><otherwise><include refid="selectSqlIgnoreModel"/></otherwise></choose>
        from  <include refid="tableSql"/>  where 1=1 <include refid="whereSqlModel"/> <include refid="orderGroupLimit"/>
    </select>
    <!-- 查询一组实体 in 语句-->
    <select id="getModelInList" parameterType="hashmap" resultMap="resultMap">
        select  <choose><when test="NotIgnore_!=null and NotIgnore_"><include refid="selectSqlNotIgnoreModel"/> </when><otherwise><include refid="selectSqlIgnoreModel"/></otherwise></choose>
        from  <include refid="tableSql"/>  where  `student_id` in
        <foreach item="id" index="index" collection="idList" open="(" separator="," close=")">#{id}</foreach>
        <include refid="orderGroupLimit"/>
    </select>
    <!-- 查询一组实体的数量 -->
    <select id="getModelListCount" parameterType="hashmap" resultType="int">
        select count(1)  from  <include refid="tableSql"/>  where 1=1 <include refid="whereSqlModel"/> <include refid="orderGroupLimit"/>
    </select>
    <!-- 插入单个实体 遇到入参null转换成数据库NULL-->
    <insert id="insertModel" parameterType="Student"  useGeneratedKeys="true" keyProperty="studentId" >
        insert into <include refid="tableSql"/> (<include refid="douFieldSql"/>) values(<include refid="douValueSql"/>)
    </insert>
    <!-- 替换单个实体 如果没有则插入 遇到入参null转换成数据库NULL-->
    <insert id="replaceModel" parameterType="Student"  useGeneratedKeys="true" keyProperty="studentId" >
        replace into <include refid="tableSql"/> (<include refid="douFieldSql"/>) values(<include refid="douValueSql"/>)
    </insert>
    <!-- 插入单个实体 遇到入参null转换成数据库默认值-->
    <insert id="insertModelWithoutNull" parameterType="Student"  useGeneratedKeys="true" keyProperty="studentId" >
        insert into <include refid="tableSql"/> (<include refid="douFieldWithoutNullSql"/>) values(<include refid="douValueWithoutNullSql"/>)
    </insert>
    <!-- 替换单个实体 如果没有则插入 遇到入参null转换成数据库默认值-->
    <insert id="replaceModelWithoutNull" parameterType="Student"  useGeneratedKeys="true" keyProperty="studentId" >
        replace into <include refid="tableSql"/> (<include refid="douFieldWithoutNullSql"/>) values(<include refid="douValueWithoutNullSql"/>)
    </insert>
    <!-- 批量插入一组实体 -->
    <insert id="batchInsertModel" parameterType="java.util.List"   useGeneratedKeys="true" keyProperty="studentId" >
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            insert into <include refid="tableSql"/> (<include refid="batchDouFieldSql"/>) values (<include refid="batchDouValueSql"/>)
        </foreach>
    </insert>
    <!-- 批量替换一组实体 -->
    <insert id="batchReplaceModel" parameterType="java.util.List"  useGeneratedKeys="true" keyProperty="studentId" >
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            replace into <include refid="tableSql"/> (<include refid="batchDouFieldSql"/>) values (<include refid="batchDouValueSql"/>)
        </foreach>
    </insert>
    <insert id="batchInsertModelWithoutNull" parameterType="java.util.List"   useGeneratedKeys="true" keyProperty="studentId" >
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            insert into <include refid="tableSql"/> (<include refid="batchDouFieldWithoutNullSql"/>) values (<include refid="batchDouValueWithoutNullSql"/>)
        </foreach>
    </insert>
    <insert id="batchReplaceModelWithoutNull" parameterType="java.util.List"  useGeneratedKeys="true" keyProperty="studentId" >
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            replace into <include refid="tableSql"/> (<include refid="batchDouFieldWithoutNullSql"/>) values (<include refid="batchDouValueWithoutNullSql"/>)
        </foreach>
    </insert>

        <!-- 清空表 操作危险 慎用，暂时注销掉-->
    <delete id="truncateModel">
        -- truncate table <include refid="tableSql"/>
    </delete>

    <!-- 根据主键删除一个实体 magicalCoderPrimaryKeyName 框架封装-->
    <delete id="deleteModelByPk" parameterType="hashmap">
        delete from <include refid="tableSql"/> <include refid="magicalcoderPkWhereSql"/>
    </delete>

    <delete id="deleteModelList" parameterType="hashmap">
        delete from <include refid="tableSql"/> where 1=1 <include refid="whereSqlModel"/>
    </delete>

    <!-- 批量删除实体 in 根据主键-->
    <delete id="deleteModelByIds" parameterType="java.util.Set">
        delete from <include refid="tableSql"/> where `student_id` in <foreach item="id" index="index" collection="collection" open="(" separator="," close=")">#{id}</foreach>
    </delete>
    <!-- 更新一个实体 -->
    <update id="updateModel" parameterType="Student">
        update <include refid="tableSql"/> <include refid="updateSetSql"/> <include refid="updatePkWhereSql"/>
    </update>
    <!-- 更新一个实体 仅仅当被更新的字段不为空的时候才更新，否则忽略更新-->
    <update id="updateModelWithoutNull" parameterType="Student">
        update <include refid="tableSql"/> <include refid="updateSetWithoutNullSql"/> <include refid="updatePkWhereSql"/>
    </update>
     <!-- 批量更新实体 传入一组实体，分别根据主键作为查询条件-->
    <update id="batchUpdateModel" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update <include refid="tableSql"/> <include refid="batchUpdateSetSql"/> <include refid="batchUpdatePkWhereSql"/>
        </foreach>
    </update>
    <update id="batchUpdateModelWithoutNull" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update <include refid="tableSql"/> <include refid="batchUpdateWithoutNullSetSql"/> <include refid="batchUpdatePkWhereSql"/>
        </foreach>
    </update>
    <!-- sql 片段 -->
   <sql id="selectSqlIgnoreModel">
        <trim suffixOverrides=",">
            <if test="studentIdIgnore_ == null or !studentIdIgnore_">`student_id`,</if>
            <if test="idNumberIgnore_ == null or !idNumberIgnore_">`id_number`,</if>
            <if test="classNameIgnore_ == null or !classNameIgnore_">`class_name`,</if>
            <if test="schoolNumberIgnore_ == null or !schoolNumberIgnore_">`school_number`</if>
        </trim>
    </sql>
    <sql id="selectSqlNotIgnoreModel">
        <trim suffixOverrides=",">
         <if test="studentIdNotIgnore_ != null and studentIdNotIgnore_">`student_id`,</if>
         <if test="idNumberNotIgnore_ != null and idNumberNotIgnore_">`id_number`,</if>
         <if test="classNameNotIgnore_ != null and classNameNotIgnore_">`class_name`,</if>
         <if test="schoolNumberNotIgnore_ != null and schoolNumberNotIgnore_">`school_number`</if>
        </trim>
    </sql>
    <sql id="douFieldSql">
        <trim suffixOverrides=",">
            <if test="studentId!=null">`student_id`,</if> `id_number`,`class_name`,`school_number`,
        </trim>
    </sql>
    <sql id="douValueSql">
        <trim suffixOverrides=",">
                <choose><when test="studentId!=null">#{studentId},</when></choose>
                <choose><when test="idNumber!=null">#{idNumber},</when><otherwise>NULL,</otherwise></choose>
                <choose><when test="className!=null">#{className},</when><otherwise>NULL,</otherwise></choose>
                <choose><when test="schoolNumber!=null">#{schoolNumber},</when><otherwise>NULL,</otherwise></choose>
        </trim>
    </sql>

    <sql id="douFieldWithoutNullSql">
        <trim suffixOverrides=",">
                <if test="studentId!=null">`student_id`,</if>
                <if test="idNumber!=null">`id_number`,</if>
                <if test="className!=null">`class_name`,</if>
                <if test="schoolNumber!=null">`school_number`,</if>

        </trim>
    </sql>
    <sql id="douValueWithoutNullSql">
        <trim suffixOverrides=",">
                <choose><when test="studentId!=null">#{studentId},</when></choose>
                <choose><when test="idNumber!=null">#{idNumber},</when></choose>
                <choose><when test="className!=null">#{className},</when></choose>
                <choose><when test="schoolNumber!=null">#{schoolNumber},</when></choose>
        </trim>
    </sql>
    <sql id="batchDouFieldSql">
        <trim suffixOverrides=",">
                <if test="item.studentId!=null">`student_id`,</if> `id_number`,`class_name`,`school_number`,
        </trim>
    </sql>
    <sql id="batchDouValueSql">
        <trim suffixOverrides=",">
                <choose><when test="item.studentId!=null">#{item.studentId},</when></choose>
                <choose><when test="item.idNumber!=null">#{item.idNumber},</when><otherwise>NULL,</otherwise></choose>
                <choose><when test="item.className!=null">#{item.className},</when><otherwise>NULL,</otherwise></choose>
                <choose><when test="item.schoolNumber!=null">#{item.schoolNumber},</when><otherwise>NULL,</otherwise></choose>
        </trim>
    </sql>
    <sql id="batchDouFieldWithoutNullSql">
        <trim suffixOverrides=",">
                <if test="item.studentId!=null">`student_id`,</if>
                <if test="item.idNumber!=null">`id_number`,</if>
                <if test="item.className!=null">`class_name`,</if>
                <if test="item.schoolNumber!=null">`school_number`,</if>

        </trim>
    </sql>
    <sql id="batchDouValueWithoutNullSql">
        <trim suffixOverrides=",">
                <choose><when test="item.studentId!=null">#{item.studentId},</when></choose>
                <choose><when test="item.idNumber!=null">#{item.idNumber},</when></choose>
                <choose><when test="item.className!=null">#{item.className},</when></choose>
                <choose><when test="item.schoolNumber!=null">#{item.schoolNumber},</when></choose>
        </trim>
    </sql>
    <sql id="updateSetSql">
        <set>
                    <choose> <when test="idNumber!=null">`id_number`=#{idNumber}</when> <otherwise> `id_number`=NULL</otherwise> </choose>,
                    <choose> <when test="className!=null">`class_name`=#{className}</when> <otherwise> `class_name`=NULL</otherwise> </choose>,
                    <choose> <when test="schoolNumber!=null">`school_number`=#{schoolNumber}</when> <otherwise> `school_number`=NULL</otherwise> </choose>,
        </set>
    </sql>
    <sql id="updateSetWithoutNullSql">
        <set>
                    <choose><when test="idNumber!=null">`id_number`=#{idNumber},</when></choose>
                    <choose><when test="className!=null">`class_name`=#{className},</when></choose>
                    <choose><when test="schoolNumber!=null">`school_number`=#{schoolNumber},</when></choose>
        </set>
    </sql>
    <sql id="magicalcoderPkWhereSql">
        where 1=1
            and `student_id` = #{magicalCoderPrimaryKeyName}
    </sql>
    <sql id="updatePkWhereSql">
        where 1=1
            and `student_id` = #{studentId}
    </sql>
    <sql id="batchUpdateSetSql">
        <set>
                    <choose> <when test="item.idNumber!=null">`id_number`=#{item.idNumber}</when> <otherwise> `id_number`=NULL</otherwise> </choose>,
                    <choose> <when test="item.className!=null">`class_name`=#{item.className}</when> <otherwise> `class_name`=NULL</otherwise> </choose>,
                    <choose> <when test="item.schoolNumber!=null">`school_number`=#{item.schoolNumber}</when> <otherwise> `school_number`=NULL</otherwise> </choose>,
        </set>
    </sql>
    <sql id="batchUpdateWithoutNullSetSql">
        <set>
                    <choose> <when test="item.idNumber!=null">`id_number`=#{item.idNumber},</when></choose>
                    <choose> <when test="item.className!=null">`class_name`=#{item.className},</when></choose>
                    <choose> <when test="item.schoolNumber!=null">`school_number`=#{item.schoolNumber},</when></choose>
        </set>
    </sql>
    <sql id="batchUpdatePkWhereSql">
        where 1=1
            and `student_id` = #{item.studentId}
    </sql>
    <!-- 这里可以加上数据库名称 方便的切换数据库-->
    <sql id="tableSql">
        competition.student
    </sql>

   <sql id="whereSqlModel">
        <if test="studentId!=null "> and `student_id` = #{studentId}</if>
        <if test="idNumber!=null "> and `id_number` = #{idNumber}</if>
        <if test="className!=null "> and `class_name` = #{className}</if>
        <if test="schoolNumber!=null "> and `school_number` = #{schoolNumber}</if>
                <if test="studentIdFirst!=null "> and `student_id` <![CDATA[=]]>
                            #{studentIdFirst}
                </if>
                <if test="idNumberFirst!=null "> and `id_number` <![CDATA[=]]>
                            #{idNumberFirst}
                </if>
                <if test="classNameFirst!=null "> and `class_name` <![CDATA[=]]>
                            #{classNameFirst}
                </if>
                <if test="schoolNumberFirst!=null "> and `school_number` <![CDATA[=]]>
                            #{schoolNumberFirst}
                </if>
        <!--<if test="whereSql!=null"> ${whereSql}</if>-->
    </sql>

    <sql id="safeGroupBy">
        <if test="safeGroupBy!=null and safeGroupBy!=''">
            group by
            <choose>
                <when test="safeGroupBy != null and safeGroupBy == 'student_id'">  `student_id` </when>
                <when test="safeGroupBy != null and safeGroupBy == 'id_number'">  `id_number` </when>
                <when test="safeGroupBy != null and safeGroupBy == 'class_name'">  `class_name` </when>
                <when test="safeGroupBy != null and safeGroupBy == 'school_number'">  `school_number` </when>
            </choose>
        </if>
    </sql>
    <sql id="safeOrderBy">
        <if test="safeOrderBy!=null and safeOrderBy!=''">
            <choose>
                <when test="safeOrderBy != null and safeOrderBy == 'student_id desc'"> order by  `student_id` desc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'student_id asc'"> order by `student_id` asc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'id_number desc'"> order by  `id_number` desc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'id_number asc'"> order by `id_number` asc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'class_name desc'"> order by  `class_name` desc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'class_name asc'"> order by `class_name` asc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'school_number desc'"> order by  `school_number` desc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'school_number asc'"> order by `school_number` asc </when>
            </choose>
        </if>
    </sql>

    <sql id="orderGroupLimit">
        <include refid="safeGroupBy"/>
        <if test="notSafeGroupBy != null and notSafeGroupBy != ''"> group by ${notSafeGroupBy}</if>
        <include refid="safeOrderBy"/>
        <if test="notSafeOrderBy != null and notSafeOrderBy != ''"> order by ${notSafeOrderBy}</if>
        <if test="limit != null"> LIMIT <if test="start != null">#{start},</if>#{limit} </if>
    </sql>

</mapper>
