<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
* 代码为自动生成 Created by www.magicalcoder.com
* 如果你改变了此类 read 请将此行删除
*  欢迎加入官方QQ群:323237052
-->
<mapper namespace="com.hw.competition.service.productmaterial.mapper.ProductMaterialMapper">
    <!-- ProductMaterial -->
    <resultMap id="resultMap" type="ProductMaterial">
                <id column="product_material_id" property="productMaterialId"/>
                <result column="product_id" property="productId" />
                <result column="dict_id" property="dictId" />
                <result column="product_file" property="productFile" />
    </resultMap>
    <!-- 查询单个实体 -->
    <select id="getModel" parameterType="hashmap" resultMap="resultMap">
        select  <choose><when test="NotIgnore_!=null and NotIgnore_"><include refid="selectSqlNotIgnoreModel"/> </when><otherwise><include refid="selectSqlIgnoreModel"/></otherwise></choose>
        from  <include refid="tableSql"/>  where 1=1 <include refid="whereSqlModel"/> <include refid="orderGroupLimit"/>
    </select>
    <!--根据主键 查询单个实体 -->
    <select id="getModelByPk" parameterType="hashmap" resultMap="resultMap">
        select  <choose><when test="NotIgnore_!=null and NotIgnore_"><include refid="selectSqlNotIgnoreModel"/> </when><otherwise><include refid="selectSqlIgnoreModel"/></otherwise></choose>
        from  <include refid="tableSql"/>  <include refid="magicalcoderPkWhereSql"/>
    </select>
    <!-- 查询一组实体 -->
    <select id="getModelList" parameterType="hashmap" resultMap="resultMap">
        select  <choose><when test="NotIgnore_!=null and NotIgnore_"><include refid="selectSqlNotIgnoreModel"/> </when><otherwise><include refid="selectSqlIgnoreModel"/></otherwise></choose>
        from  <include refid="tableSql"/>  where 1=1 <include refid="whereSqlModel"/> <include refid="orderGroupLimit"/>
    </select>
    <!-- 查询一组实体 in 语句-->
    <select id="getModelInList" parameterType="hashmap" resultMap="resultMap">
        select  <choose><when test="NotIgnore_!=null and NotIgnore_"><include refid="selectSqlNotIgnoreModel"/> </when><otherwise><include refid="selectSqlIgnoreModel"/></otherwise></choose>
        from  <include refid="tableSql"/>  where  `product_material_id` in
        <foreach item="id" index="index" collection="idList" open="(" separator="," close=")">#{id}</foreach>
        <include refid="orderGroupLimit"/>
    </select>
    <!-- 查询一组实体的数量 -->
    <select id="getModelListCount" parameterType="hashmap" resultType="int">
        select count(1)  from  <include refid="tableSql"/>  where 1=1 <include refid="whereSqlModel"/> <include refid="orderGroupLimit"/>
    </select>
    <!-- 插入单个实体 遇到入参null转换成数据库NULL-->
    <insert id="insertModel" parameterType="ProductMaterial"  useGeneratedKeys="true" keyProperty="productMaterialId" >
        insert into <include refid="tableSql"/> (<include refid="douFieldSql"/>) values(<include refid="douValueSql"/>)
    </insert>
    <!-- 替换单个实体 如果没有则插入 遇到入参null转换成数据库NULL-->
    <insert id="replaceModel" parameterType="ProductMaterial"  useGeneratedKeys="true" keyProperty="productMaterialId" >
        replace into <include refid="tableSql"/> (<include refid="douFieldSql"/>) values(<include refid="douValueSql"/>)
    </insert>
    <!-- 插入单个实体 遇到入参null转换成数据库默认值-->
    <insert id="insertModelWithoutNull" parameterType="ProductMaterial"  useGeneratedKeys="true" keyProperty="productMaterialId" >
        insert into <include refid="tableSql"/> (<include refid="douFieldWithoutNullSql"/>) values(<include refid="douValueWithoutNullSql"/>)
    </insert>
    <!-- 替换单个实体 如果没有则插入 遇到入参null转换成数据库默认值-->
    <insert id="replaceModelWithoutNull" parameterType="ProductMaterial"  useGeneratedKeys="true" keyProperty="productMaterialId" >
        replace into <include refid="tableSql"/> (<include refid="douFieldWithoutNullSql"/>) values(<include refid="douValueWithoutNullSql"/>)
    </insert>
    <!-- 批量插入一组实体 -->
    <insert id="batchInsertModel" parameterType="java.util.List"   useGeneratedKeys="true" keyProperty="productMaterialId" >
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            insert into <include refid="tableSql"/> (<include refid="batchDouFieldSql"/>) values (<include refid="batchDouValueSql"/>)
        </foreach>
    </insert>
    <!-- 批量替换一组实体 -->
    <insert id="batchReplaceModel" parameterType="java.util.List"  useGeneratedKeys="true" keyProperty="productMaterialId" >
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            replace into <include refid="tableSql"/> (<include refid="batchDouFieldSql"/>) values (<include refid="batchDouValueSql"/>)
        </foreach>
    </insert>
    <insert id="batchInsertModelWithoutNull" parameterType="java.util.List"   useGeneratedKeys="true" keyProperty="productMaterialId" >
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            insert into <include refid="tableSql"/> (<include refid="batchDouFieldWithoutNullSql"/>) values (<include refid="batchDouValueWithoutNullSql"/>)
        </foreach>
    </insert>
    <insert id="batchReplaceModelWithoutNull" parameterType="java.util.List"  useGeneratedKeys="true" keyProperty="productMaterialId" >
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            replace into <include refid="tableSql"/> (<include refid="batchDouFieldWithoutNullSql"/>) values (<include refid="batchDouValueWithoutNullSql"/>)
        </foreach>
    </insert>

        <!-- 清空表 操作危险 慎用，暂时注销掉-->
    <delete id="truncateModel">
        -- truncate table <include refid="tableSql"/>
    </delete>

    <!-- 根据主键删除一个实体 magicalCoderPrimaryKeyName 框架封装-->
    <delete id="deleteModelByPk" parameterType="hashmap">
        delete from <include refid="tableSql"/> <include refid="magicalcoderPkWhereSql"/>
    </delete>

    <delete id="deleteModelList" parameterType="hashmap">
        delete from <include refid="tableSql"/> where 1=1 <include refid="whereSqlModel"/>
    </delete>

    <!-- 批量删除实体 in 根据主键-->
    <delete id="deleteModelByIds" parameterType="java.util.Set">
        delete from <include refid="tableSql"/> where `product_material_id` in <foreach item="id" index="index" collection="collection" open="(" separator="," close=")">#{id}</foreach>
    </delete>
    <!-- 更新一个实体 -->
    <update id="updateModel" parameterType="ProductMaterial">
        update <include refid="tableSql"/> <include refid="updateSetSql"/> <include refid="updatePkWhereSql"/>
    </update>
    <!-- 更新一个实体 仅仅当被更新的字段不为空的时候才更新，否则忽略更新-->
    <update id="updateModelWithoutNull" parameterType="ProductMaterial">
        update <include refid="tableSql"/> <include refid="updateSetWithoutNullSql"/> <include refid="updatePkWhereSql"/>
    </update>
     <!-- 批量更新实体 传入一组实体，分别根据主键作为查询条件-->
    <update id="batchUpdateModel" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update <include refid="tableSql"/> <include refid="batchUpdateSetSql"/> <include refid="batchUpdatePkWhereSql"/>
        </foreach>
    </update>
    <update id="batchUpdateModelWithoutNull" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update <include refid="tableSql"/> <include refid="batchUpdateWithoutNullSetSql"/> <include refid="batchUpdatePkWhereSql"/>
        </foreach>
    </update>
    <!-- sql 片段 -->
   <sql id="selectSqlIgnoreModel">
        <trim suffixOverrides=",">
            <if test="productMaterialIdIgnore_ == null or !productMaterialIdIgnore_">`product_material_id`,</if>
            <if test="productIdIgnore_ == null or !productIdIgnore_">`product_id`,</if>
            <if test="dictIdIgnore_ == null or !dictIdIgnore_">`dict_id`,</if>
            <if test="productFileIgnore_ == null or !productFileIgnore_">`product_file`</if>
        </trim>
    </sql>
    <sql id="selectSqlNotIgnoreModel">
        <trim suffixOverrides=",">
         <if test="productMaterialIdNotIgnore_ != null and productMaterialIdNotIgnore_">`product_material_id`,</if>
         <if test="productIdNotIgnore_ != null and productIdNotIgnore_">`product_id`,</if>
         <if test="dictIdNotIgnore_ != null and dictIdNotIgnore_">`dict_id`,</if>
         <if test="productFileNotIgnore_ != null and productFileNotIgnore_">`product_file`</if>
        </trim>
    </sql>
    <sql id="douFieldSql">
        <trim suffixOverrides=",">
            <if test="productMaterialId!=null">`product_material_id`,</if> `product_id`,`dict_id`,`product_file`,
        </trim>
    </sql>
    <sql id="douValueSql">
        <trim suffixOverrides=",">
                <choose><when test="productMaterialId!=null">#{productMaterialId},</when></choose>
                <choose><when test="productId!=null">#{productId},</when><otherwise>NULL,</otherwise></choose>
                <choose><when test="dictId!=null">#{dictId},</when><otherwise>NULL,</otherwise></choose>
                <choose><when test="productFile!=null">#{productFile},</when><otherwise>NULL,</otherwise></choose>
        </trim>
    </sql>

    <sql id="douFieldWithoutNullSql">
        <trim suffixOverrides=",">
                <if test="productMaterialId!=null">`product_material_id`,</if>
                <if test="productId!=null">`product_id`,</if>
                <if test="dictId!=null">`dict_id`,</if>
                <if test="productFile!=null">`product_file`,</if>

        </trim>
    </sql>
    <sql id="douValueWithoutNullSql">
        <trim suffixOverrides=",">
                <choose><when test="productMaterialId!=null">#{productMaterialId},</when></choose>
                <choose><when test="productId!=null">#{productId},</when></choose>
                <choose><when test="dictId!=null">#{dictId},</when></choose>
                <choose><when test="productFile!=null">#{productFile},</when></choose>
        </trim>
    </sql>
    <sql id="batchDouFieldSql">
        <trim suffixOverrides=",">
                <if test="item.productMaterialId!=null">`product_material_id`,</if> `product_id`,`dict_id`,`product_file`,
        </trim>
    </sql>
    <sql id="batchDouValueSql">
        <trim suffixOverrides=",">
                <choose><when test="item.productMaterialId!=null">#{item.productMaterialId},</when></choose>
                <choose><when test="item.productId!=null">#{item.productId},</when><otherwise>NULL,</otherwise></choose>
                <choose><when test="item.dictId!=null">#{item.dictId},</when><otherwise>NULL,</otherwise></choose>
                <choose><when test="item.productFile!=null">#{item.productFile},</when><otherwise>NULL,</otherwise></choose>
        </trim>
    </sql>
    <sql id="batchDouFieldWithoutNullSql">
        <trim suffixOverrides=",">
                <if test="item.productMaterialId!=null">`product_material_id`,</if>
                <if test="item.productId!=null">`product_id`,</if>
                <if test="item.dictId!=null">`dict_id`,</if>
                <if test="item.productFile!=null">`product_file`,</if>

        </trim>
    </sql>
    <sql id="batchDouValueWithoutNullSql">
        <trim suffixOverrides=",">
                <choose><when test="item.productMaterialId!=null">#{item.productMaterialId},</when></choose>
                <choose><when test="item.productId!=null">#{item.productId},</when></choose>
                <choose><when test="item.dictId!=null">#{item.dictId},</when></choose>
                <choose><when test="item.productFile!=null">#{item.productFile},</when></choose>
        </trim>
    </sql>
    <sql id="updateSetSql">
        <set>
                    <choose> <when test="productId!=null">`product_id`=#{productId}</when> <otherwise> `product_id`=NULL</otherwise> </choose>,
                    <choose> <when test="dictId!=null">`dict_id`=#{dictId}</when> <otherwise> `dict_id`=NULL</otherwise> </choose>,
                    <choose> <when test="productFile!=null">`product_file`=#{productFile}</when> <otherwise> `product_file`=NULL</otherwise> </choose>,
        </set>
    </sql>
    <sql id="updateSetWithoutNullSql">
        <set>
                    <choose><when test="productId!=null">`product_id`=#{productId},</when></choose>
                    <choose><when test="dictId!=null">`dict_id`=#{dictId},</when></choose>
                    <choose><when test="productFile!=null">`product_file`=#{productFile},</when></choose>
        </set>
    </sql>
    <sql id="magicalcoderPkWhereSql">
        where 1=1
            and `product_material_id` = #{magicalCoderPrimaryKeyName}
    </sql>
    <sql id="updatePkWhereSql">
        where 1=1
            and `product_material_id` = #{productMaterialId}
    </sql>
    <sql id="batchUpdateSetSql">
        <set>
                    <choose> <when test="item.productId!=null">`product_id`=#{item.productId}</when> <otherwise> `product_id`=NULL</otherwise> </choose>,
                    <choose> <when test="item.dictId!=null">`dict_id`=#{item.dictId}</when> <otherwise> `dict_id`=NULL</otherwise> </choose>,
                    <choose> <when test="item.productFile!=null">`product_file`=#{item.productFile}</when> <otherwise> `product_file`=NULL</otherwise> </choose>,
        </set>
    </sql>
    <sql id="batchUpdateWithoutNullSetSql">
        <set>
                    <choose> <when test="item.productId!=null">`product_id`=#{item.productId},</when></choose>
                    <choose> <when test="item.dictId!=null">`dict_id`=#{item.dictId},</when></choose>
                    <choose> <when test="item.productFile!=null">`product_file`=#{item.productFile},</when></choose>
        </set>
    </sql>
    <sql id="batchUpdatePkWhereSql">
        where 1=1
            and `product_material_id` = #{item.productMaterialId}
    </sql>
    <!-- 这里可以加上数据库名称 方便的切换数据库-->
    <sql id="tableSql">
        competition.product_material
    </sql>

   <sql id="whereSqlModel">
        <if test="productMaterialId!=null "> and `product_material_id` = #{productMaterialId}</if>
        <if test="productId!=null "> and `product_id` = #{productId}</if>
        <if test="dictId!=null "> and `dict_id` = #{dictId}</if>
        <if test="productFile!=null "> and `product_file` = #{productFile}</if>
                <if test="productMaterialIdFirst!=null "> and `product_material_id` <![CDATA[=]]>
                            #{productMaterialIdFirst}
                </if>
                <if test="productIdFirst!=null "> and `product_id` <![CDATA[=]]>
                            #{productIdFirst}
                </if>
                <if test="dictIdFirst!=null "> and `dict_id` <![CDATA[=]]>
                            #{dictIdFirst}
                </if>
                <if test="productFileFirst!=null "> and `product_file` <![CDATA[=]]>
                            #{productFileFirst}
                </if>
        <!--<if test="whereSql!=null"> ${whereSql}</if>-->
    </sql>

    <sql id="safeGroupBy">
        <if test="safeGroupBy!=null and safeGroupBy!=''">
            group by
            <choose>
                <when test="safeGroupBy != null and safeGroupBy == 'product_material_id'">  `product_material_id` </when>
                <when test="safeGroupBy != null and safeGroupBy == 'product_id'">  `product_id` </when>
                <when test="safeGroupBy != null and safeGroupBy == 'dict_id'">  `dict_id` </when>
                <when test="safeGroupBy != null and safeGroupBy == 'product_file'">  `product_file` </when>
            </choose>
        </if>
    </sql>
    <sql id="safeOrderBy">
        <if test="safeOrderBy!=null and safeOrderBy!=''">
            <choose>
                <when test="safeOrderBy != null and safeOrderBy == 'product_material_id desc'"> order by  `product_material_id` desc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'product_material_id asc'"> order by `product_material_id` asc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'product_id desc'"> order by  `product_id` desc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'product_id asc'"> order by `product_id` asc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'dict_id desc'"> order by  `dict_id` desc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'dict_id asc'"> order by `dict_id` asc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'product_file desc'"> order by  `product_file` desc </when>
                <when test="safeOrderBy != null and safeOrderBy == 'product_file asc'"> order by `product_file` asc </when>
            </choose>
        </if>
    </sql>

    <sql id="orderGroupLimit">
        <include refid="safeGroupBy"/>
        <if test="notSafeGroupBy != null and notSafeGroupBy != ''"> group by ${notSafeGroupBy}</if>
        <include refid="safeOrderBy"/>
        <if test="notSafeOrderBy != null and notSafeOrderBy != ''"> order by ${notSafeOrderBy}</if>
        <if test="limit != null"> LIMIT <if test="start != null">#{start},</if>#{limit} </if>
    </sql>

</mapper>
